# plotting consecutive z-peak pairs, giving a spiky point for different
# parameter values of the LS

import numpy as np
import matplotlib.pyplot as plt
import functools as functools
import Jessica_Regime_Shift as jrs
import Jessica_Math as jm

xs_initial = 6.
ys_initial = 0.
zs_initial = 3.

dt = 0.001
timesteps = 250000

def SpikyPointR(s=10,r=28,b=8/3,ax=None):
    lorenz_sol=np.zeros((timesteps+1,3))
    lorenz_sol[0,:]=[xs_initial, ys_initial, zs_initial]
    jrs.LorenzSystemDerivative = functools.partial(jrs.LorenzSystemDerivative, s=s,r=r,b=b)
    
    for i in range(timesteps):
        state0 = lorenz_sol[i,:]
        lorenz_sol[i+1,:] = jm.RungeKuttaOneStep(state0, dt, jrs.LorenzSystemDerivative)
    
    zPeakLocs,zPeakValues = jm.AllMaxima(lorenz_sol[:,2])
    
    for i in range(1,len(zPeakValues)):
        ax.scatter(zPeakValues[i-1],zPeakValues[i],s=2,c='black')
    ax.plot(x,y,linewidth=1.0,c='black')  
    
        
fig=plt.figure(figsize=(30,25))
#ax.set_title("r = %i" % r)

ax=fig.add_subplot(221)
x = np.linspace(30,50)
y = np.linspace(30,50)
SpikyPointR(10,28,8/3,ax)
ax.set_title("r = 28")

ax2=fig.add_subplot(222)
x = np.linspace(50,90)
y = np.linspace(50,90)
SpikyPointR(10,50,8/3,ax2)
ax2.set_title("r = 50")

ax3=fig.add_subplot(223)
x = np.linspace(75,130)
y = np.linspace(75,130)
SpikyPointR(10,70,8/3,ax3)
ax3.set_title("r = 70")

ax4=fig.add_subplot(224)
x = np.linspace(95,170)
y = np.linspace(95,170)
SpikyPointR(10,90,8/3,ax4)
ax4.set_title("r = 90")
