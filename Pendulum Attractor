import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint


def Pendulum(s,t):
    x=s[0]
    y=s[1]
    dxdt=y
    dydt=-0.2*y-np.sin(x)+1.73*np.cos(t)
    return[dxdt,dydt]
    
    
def PointInAnAttractor(xPosition,yPosition, arrayX, arrayY):
    attractorArrayLength=len(arrayX)
    accuracy=0.05
    xUpper = xPosition + accuracy
    xLower = xPosition - accuracy
    yUpper = yPosition + accuracy
    yLower = yPosition - accuracy
    
    found=False
    for i in range(attractorArrayLength):
        xxx=arrayX[i]
        yyy=arrayY[i]
        withinXRange = (xLower < xxx) and (xxx < xUpper)
        withinYRange = (yLower < yyy) and (yyy < yUpper)
        if (withinXRange and withinYRange):
            print(xxx,yyy)
            found=True
            break
        
    return found


def GoToAttractor(arrayX,arrayY):
    
    attractorID=np.empty((8,2))
    attractorID[0,0]=-3.0 
    attractorID[0,1]=-1.5
    attractorID[1,0]=3.0
    attractorID[1,1]=1.5
    attractorID[2,0]=-3.0
    attractorID[2,1]=-1.7
    attractorID[3,0]=3.0
    attractorID[3,1]=1.7
    attractorID[4,0]=1.6
    attractorID[4,1]=2.0
    attractorID[5,0]=-1.6
    attractorID[5,1]=-2.0
    attractorID[6,0]=-2.81
    attractorID[6,1]=0.0
    attractorID[7,0]=2.81
    attractorID[7,1]=0.0
    
    if (PointInAnAttractor(attractorID[0,0],attractorID[0,1], arrayX, arrayY)):
        plt.plot(attractorID[0,0],attractorID[0,1],'*')
        return 1
    elif (PointInAnAttractor(attractorID[1,0],attractorID[1,1], arrayX, arrayY)):
        plt.plot(attractorID[1,0],attractorID[1,1],'*')
        return 2
    elif (PointInAnAttractor(attractorID[2,0],attractorID[2,1], arrayX, arrayY)):
        plt.plot(attractorID[2,0],attractorID[2,1],'*')
        return 3
    elif (PointInAnAttractor(attractorID[3,0],attractorID[3,1], arrayX, arrayY)):
        plt.plot(attractorID[3,0],attractorID[3,1],'*')
        return 4
    elif (PointInAnAttractor(attractorID[4,0],attractorID[4,1], arrayX, arrayY)):
        plt.plot(attractorID[4,0],attractorID[4,1],'*')
        return 5
    elif (PointInAnAttractor(attractorID[5,0],attractorID[5,1], arrayX, arrayY)):
        plt.plot(attractorID[5,0],attractorID[5,1],'*')
        return 6
    elif (PointInAnAttractor(attractorID[6,0],attractorID[6,1], arrayX, arrayY)):
        plt.plot(attractorID[6,0],attractorID[6,1],'*')
        return 7
    elif (PointInAnAttractor(attractorID[7,0],attractorID[7,1], arrayX, arrayY)):
        plt.plot(attractorID[7,0],attractorID[7,1],'*')
        return 8
    
    else:
        return 0
    
t=np.linspace(0,200*np.pi,50001) 

initX=np.random.uniform()*2*np.pi-np.pi
initY=np.random.uniform()*2*np.pi-np.pi

s0=[initX,initY]
s=odeint(Pendulum,s0,t)
sx=(s[45000:50000,0]-np.pi)%(2*np.pi)-np.pi
sy=s[45000:50000,1]

#for i in range(4999):
#    if sy[i]>0 and sy[i+1]<0:
#        print(sx[i],sy[i])
#    if sy[i]<0 and sy[i+1]>0:
#        print(sx[i],sy[i])
print('the initial point goes to attractor: ', GoToAttractor(sx,sy) )
    

plt.plot(sx, sy,'.',ms=2)
plt.xlabel('x')

plt.axis([-np.pi,np.pi,-4,4])
#plt.axis([-0,1,-0.1,0.1])

plt.grid()
plt.gcf().set_size_inches(12,12)
plt.show
