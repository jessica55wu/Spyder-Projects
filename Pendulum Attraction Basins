import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def Pendulum(s,t):
    x=s[0]
    y=s[1]
    dxdt=y
    dydt=-0.2*y-np.sin(x)+1.73*np.cos(t)
    return[dxdt,dydt]

start=np.empty((4,2))
start[0,0]=0.0
start[0,1]=3.4
start[1,0]=0.0
start[1,1]=-3.4
start[2,0]=3.4
start[2,1]=0.0
start[3,0]=0.0
start[3,1]=5.0

t=np.linspace(0,200*np.pi,50001)

f=plt.figure()
#Find the first attractor
for k in range(4):
    x0=start[k,0]
    y0=start[k,1]
    #print('x0=',x0, 'y0=',y0)
    s0=[x0,y0]
    s=odeint(Pendulum,s0,t)
    
    axs=plt.subplot(2,2,k+1)
    #attractors 1-4      
    plt.plot((s[45000:50000,0]-np.pi)%(2*np.pi)-np.pi, t[45000:50000]%(2*np.pi)-np.pi,'.',ms=0.5)
    plt.grid()
    plt.xlabel('x')
    plt.ylabel('t')
    eee=k+1 
    plt.title('Attractor # %i' %eee)
    plt.axis([-np.pi,np.pi,-np.pi,np.pi])

plt.gcf().set_size_inches(12,12)
plt.show

f=plt.figure()
#Find the first attractor
for k in range(4):
    x0=start[k,0]
    y0=start[k,1]
    #print('x0=',x0, 'y0=',y0)
    s0=[x0,y0]
    s=odeint(Pendulum,s0,t)
    
    axs=plt.subplot(2,2,k+1)
    #attractors 5-8
    plt.plot((-s[45000:50000,0]-np.pi)%(2*np.pi)-np.pi, -t[45000:50000]%(2*np.pi)-np.pi,'.',ms=0.5)
    plt.grid()
    plt.xlabel('x')
    plt.ylabel('t')
    eee=k+5 
    plt.title('Attractor # %i' %eee)
    plt.axis([-np.pi,np.pi,-np.pi,np.pi])
    
plt.gcf().set_size_inches(12,12)
plt.show

def PointInAnAttractor(xPosition,yPosition, arrayX, arrayY):
    attractorArrayLength=len(arrayX)
    accuracy=0.05
    xUpper = xPosition + accuracy
    xLower = xPosition - accuracy
    yUpper = yPosition + accuracy
    yLower = yPosition - accuracy
   
    found=False
    # searching array for a value that is close enough to the
    # point specific to an attractor
    for i in range(attractorArrayLength):
        xxx=arrayX[i]
        yyy=arrayY[i]
        withinXRange = (xLower < xxx) and (xxx < xUpper)
        withinYRange = (yLower < yyy) and (yyy < yUpper)
        if (withinXRange and withinYRange):
            found=True
            break
    return found

def GoToAttractor(arrayX,arrayY):
   
    attractorID=np.empty((8,2))
    attractorID[0,0]=-3.0
    attractorID[0,1]=-1.5
    attractorID[1,0]=3.0
    attractorID[1,1]=1.5
    attractorID[2,0]=-3.0
    attractorID[2,1]=-1.7
    attractorID[3,0]=3.0
    attractorID[3,1]=1.7
    attractorID[4,0]=1.6
    attractorID[4,1]=2.0
    attractorID[5,0]=-1.6
    attractorID[5,1]=-2.0
    attractorID[6,0]=-2.81
    attractorID[6,1]=0.0
    attractorID[7,0]=2.81
    attractorID[7,1]=0.0
   
    if (PointInAnAttractor(attractorID[0,0],attractorID[0,1], arrayX, arrayY)):
        #plt.plot(attractorID[0,0],attractorID[0,1],'*')
        return 2
    elif (PointInAnAttractor(attractorID[1,0],attractorID[1,1], arrayX, arrayY)):
        #plt.plot(attractorID[1,0],attractorID[1,1],'*')
        return 6
    elif (PointInAnAttractor(attractorID[2,0],attractorID[2,1], arrayX, arrayY)):
        #plt.plot(attractorID[2,0],attractorID[2,1],'*')
        return 1
    elif (PointInAnAttractor(attractorID[3,0],attractorID[3,1], arrayX, arrayY)):
        #plt.plot(attractorID[3,0],attractorID[3,1],'*')
        return 5
    elif (PointInAnAttractor(attractorID[4,0],attractorID[4,1], arrayX, arrayY)):
        #plt.plot(attractorID[4,0],attractorID[4,1],'*')
        return 8
    elif (PointInAnAttractor(attractorID[5,0],attractorID[5,1], arrayX, arrayY)):
        #plt.plot(attractorID[5,0],attractorID[5,1],'*')
        return 4
    elif (PointInAnAttractor(attractorID[6,0],attractorID[6,1], arrayX, arrayY)):
        #plt.plot(attractorID[6,0],attractorID[6,1],'*')
        return 3
    elif (PointInAnAttractor(attractorID[7,0],attractorID[7,1], arrayX, arrayY)):
        #plt.plot(attractorID[7,0],attractorID[7,1],'*')
        return 7
   
    else:
        return 0

'gridsize controls the resolution of your attraction basin diagram, large values take long computation time'
gridsize=10
initX=np.linspace(-np.pi,np.pi,gridsize)
initY=np.linspace(-4.0,4.0,gridsize)
X,Y=np.meshgrid(initX,initY)
attractorNum=np.empty((gridsize,gridsize))

for i in range(gridsize):
    for j in range(gridsize):
        s0=[initX[i],initY[j]]
        s=odeint(Pendulum,s0,t)
        sx=(s[45000:50000,0]-np.pi)%(2*np.pi)-np.pi
        sy=s[45000:50000,1]
        attractorNum[i,j]=GoToAttractor(sx,sy)
   
fig,ax=plt.subplots()
p=ax.pcolor(X,Y,attractorNum,cmap=plt.cm.RdBu, vmin=1, vmax=8)
cb=fig.colorbar(p)
plt.xlabel('x')
plt.ylabel('y')

plt.show()
