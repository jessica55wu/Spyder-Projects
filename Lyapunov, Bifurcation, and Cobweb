import numpy as np
import matplotlib.pyplot as plt

#Determine starting value for logistic
m = float(input("Enter your starting x value: "))

def logistic(r,x):
    return r*x*(1-x)

#Define logistic plotting function
def plot_system (r, x0, n, ax=None):
    #Plot the function and the y=x diagonal line
    t=np.linspace(0,1)
    ax.plot(t,logistic(r,t),'k',lw=2)
    ax.plot([0,1],[0,1],'k',lw=2)

    #Recursively apply y=f(x) and plot two lines:
    # (x,x) -> (x,y)
    # (x,y) -> (y,y)
    x = x0
    for i in range(n):
        y = logistic(r,x)
        ax.plot([x,x],[x,y],'k',lw=1)
        ax.plot([x,y],[y,y],'k',lw=1)
        ax.plot([x],[y],'ok', ms=3, alpha=(i+1)/n)
        x=y
    
    #Set axes and title
    ax.set_xlim(0,1)
    ax.set_ylim(0,1)
    ax.set_title(f"$r={r:0.1f},\,x_0={x0:0.1f}$")

#Plot two logistic maps
fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,6),sharey=True)
plot_system(2.5,m,100,ax=ax1)
plot_system(3.5,m,100,ax=ax2)

# Simulate logistic for 10000 values between 2.5 and 4.0
n = 10000
r = np.linspace(2.5, 4.0, n)

# Iterate 1000 times and keep last 100 for plot
iterations = 1000
last = 100

# Initialize all systems with same constant
x = 1e-5 * np.ones(n)

lyapunov = np.zeros(n)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 9),
                               sharex=True)
for i in range(iterations):
    x = logistic(r, x)
    # Compute the partial sum of the Lyapunov exponent
    lyapunov += np.log(abs(r - 2*r*x))
    # Display the bifurcation diagram
    if i >= (iterations - last):
        ax1.plot(r, x, ',k', alpha=.25)
ax1.set_xlim(2.5, 4)
ax1.set_title("Bifurcation diagram")

# Display the Lyapunov exponent
# Horizontal line.
ax2.axhline(0, color='k', lw=.5, alpha=.5)
# Negative Lyapunov exponent
ax2.plot(r[lyapunov < 0],
         lyapunov[lyapunov < 0] / iterations,
         '.k', alpha=.5, ms=.5)
# Positive Lyapunov exponent
ax2.plot(r[lyapunov >= 0],
         lyapunov[lyapunov >= 0] / iterations,
         '.r', alpha=.5, ms=.5)
ax2.set_xlim(2.5, 4)
ax2.set_ylim(-2, 1)
ax2.set_title("Lyapunov exponent")
plt.tight_layout()

plt.show()
